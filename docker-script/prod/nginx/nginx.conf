#######################################################
# REFERENCES
# - https://elvanov.com/2312
# - https://deeplify.dev/server/web/nginx-configuration
#######################################################
user nginx; # nginx가 실행되는 권한을 누구에게 줄 것인지? [user] [group]
worker_processes auto; # CPU Core 개수만큼 nginx의 worker 개수를 구성 => CPU : 1vCPU -> 1 nginx woker node

pid /var/run/nginx.pid; # Nginx master process PID

events { # Nginx 비동기 이벤트 처리 방식에 대한 옵션 지정
    worker_connections 1024; # workder processes가 동시에 처리 할 수 있는 접속자의 수를 나타낸다, default 1024
}

http {
    charset utf-8; # encoding utf-8 설정
    include       /etc/nginx/mime.types; # 설정파일 외부에 있는 다른 설정파일을 포함시킬 때 사용
    default_type  application/json; # 이 Web Server의 기본 Content-Type을 설정

    # 로그 포맷 설정 - https://nginx.org/en/docs/varindex.html
    log_format combined_no_query '$remote_addr - $remote_user [$time_local] '
           '"$request" $status $body_bytes_sent '
           '"$http_referer" "$http_user_agent" '
           '$request_time $upstream_response_time';

    # 로그 포맷 설정 - https://nginx.org/en/docs/varindex.html
    log_format json escape=json
      '{"x_request_id": "$request_id", '
      '"status": $status, '
      '"time_local": "$time_iso8601", '
      '"x_request_svc": "$http_x_request_svc", '
      '"hostname": "$hostname", '
      '"domain":"$host", '
      '"client_addr": "$remote_addr", '
      '"request_method": "$request_method", '
      '"content_type": "$content_type", '
      '"http_user_agent": "$http_user_agent", '
      '"request_uri": "$uri", '
      '"query_string": "$query_string", '
      '"request_body": "$request_body", '
      '"size": $body_bytes_sent, '
    '}';

    # nginx에서 정적파일을 보내도록 설정
    # 리눅스 서버의 sendfile() 콜을 사용할지 말지에 대한 옵션,
    # on 설정 시 커널에서 최적화 알고리즘 사용하여 전송 속도 증가 + 메모리 사용 감소
    sendfile                    on;
    keepalive_timeout           0; # 접속 시 커넥션을 몇 초동안 유지할지에 대한 설정값, 값이 높으면 불필요 커넥션을 유지 -> 낮은값 또는 0을 권장 (default=10)
    keepalive_requests          1000; # Web Server가 캐싱할 수 있는 커넥션 개수 지정
    reset_timedout_connection   on;

    # gzip configuration
    # Web Server에서 문서 요청에 대한 응답을 gzip 압축 형식으로 전송 하도록 설정
    gzip  on;
    gzip_min_length 10240;
    gzip_comp_level 3;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    open_file_cache max=10000 inactive=30s;
    open_file_cache_valid    60s;
    open_file_cache_min_uses 2;
    open_file_cache_errors   on;

    # proxy server request forwarding
    # nginx proxy web server and event driven
    # docker-compose 사용시에는 server name로 변경
    upstream shopping-mall          {   server 127.0.0.1:8082;     keepalive 512;  }

    server {
        listen 80; # Listening Port
        server_name shopping-mall.co.kr; # 서버 이름 [도메인 등록]

        access_log  /var/log/nginx/access.log json; # nginx access log
        error_log   /var/log/nginx/error.log; # nginx error log

        # https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffer_size
        proxy_redirect     off;
        proxy_set_header   Host             $host; # Client Host 확인
        proxy_set_header   X-Request-Id     $request_id;
        proxy_set_header   X-Forwarded-Proto $scheme; # Client가 ELB 연결에 사용한 Protocol(HTTP, HTTPS) 식별하기 위해 사용
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for; # XFF - Client IP 식별하기 위해 사용
        proxy_http_version 1.1; # HTTP Version 지정 https://seungtaek-overflow.tistory.com/10
        proxy_set_header   Connection ""; # https://seungtaek-overflow.tistory.com/10
        proxy_pass_request_headers  on; # 요청된 헤더를 프록시 서버(API)로 전달
        proxy_connect_timeout 10s; # proxy server와 연결을 맺는데 설정한 timeout
        proxy_send_timeout 5s; # 지정한 시간 내에 proxy server가 요청을 안 받으면 connection 닫음
        proxy_read_timeout 10s; # 지정한 시간 내에 proxy server가 아무것도 전송하지 않으면 connection 닫음
        proxy_buffer_size 64k;
        proxy_buffering off;
        proxy_buffers 32 32k;
        proxy_busy_buffers_size 128k;
        proxy_temp_file_write_size 64k;
        proxy_ignore_client_abort off;
        client_max_body_size 20m;
        client_body_buffer_size 128k;

        location / {
           proxy_pass http://shopping-mall;
        }
    }
}